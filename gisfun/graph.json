var zyscom = {
    /**XYZ底图**/
    baseXYZLayer:function(){
        var layer = new ol.layer.Tile({
            source:new ol.source.XYZ({
                url:'https://server.arcgisonline.com/ArcGIS/rest/services/' +
                'World_Topo_Map/MapServer/tile/{z}/{y}/{x}',
            })
        })
        return layer;
    },
    /**opemstreetmap底图**/
    OSMLayer:function(){
        var layer = new ol.layer.Tile({
            preload: 4,
            source: new ol.source.OSM()
        })
        return layer;
    },
    /**添加标注
     * @param {*vector source} source 
     * @param {*经度 Number} lng 
     * @param {*纬度 Number} lat 
     * @param {*图片地址} src 
     * @param {*图片旋转角度 Number 360} angle
     */
    addMarker:function(source,lng,lat,src,angle){
        var marker = new ol.Feature({
            // geometry: new ol.geom.Point(ol.proj.fromLonLat([lng,lat])),
            geometry: new ol.geom.Point([lng,lat]),
        });
        
        //设置点标记样式
        var style = new ol.style.Style({
            image: new ol.style.Icon({
                src: src,
                // anchor: [0,0], //点标记偏移,
                imgSize:[19,33],
                rotation:angle?angle/180*Math.PI:0
            }),
            // zIndex: 999
        });
        marker.setStyle(style);
        // marker.getStyle().getImage().setRotation(rotation/180*Math.PI);
        source.addFeature(marker);
        //
        return marker;
    },
    /**添加线
     * @param {* vector source} source 
     * @param {*坐标数组格式[[lng,lat],[lng,lat]]} coordinates 
     * @param {*} param 
     */
    addLineString:function(source,coordinates,param){
        // coordinates = [[123,23.2],[123.1,23.3],[123.3,23.4],[123.4,23.5]]
        var line = new ol.geom.LineString(coordinates);
        var feature = new ol.Feature({
            geometry: line
        });
        //可选参数
        var color = (param!=undefined && param.color!=undefined)?param.color:'#3399CC';
        var width = (param!=undefined && param.width!=undefined)?param.width:1.5;

        var stroke = new ol.style.Stroke({
            color: color,
            width: width
        });

        var style = new ol.style.Style({
            stroke: stroke
        })
        feature.setStyle(style);
        source.addFeature(feature);
        return feature;
    },
    /**
     * 添加圆
     * @param {*vectorSource} source 
     * @param {*经度 Number} lng 
     * @param {*纬度 Number} lat 
     * @param {*单位为米} radius 
     */
    addCircle:function(source,lng,lat,radius){
        var circleIn3857 = new ol.geom.Circle(ol.proj.transform([lng,lat], 'EPSG:4326', 'EPSG:3857'), radius,'XY');
        var circleIn4326 = circleIn3857.transform('EPSG:3857','EPSG:4326');
        var style = new ol.style.Style({
            fill:new ol.style.Fill({
                color:'rgba(238,34,0,0.35)'
            }),
            stroke:new ol.style.Stroke({
                width:3,
                color:'rgba(255,51,51,1)'
            })
        })
        var feature = new ol.Feature({
            geometry:circleIn4326
        })
        feature.setStyle(style);
        source.addFeature(feature);
        return feature;
    },
    /**添加多边形
     * @param {*vectorSource} source 
     * @param {*数组格式 [[[lng,lat],[lng,lat]]] } coordinates 3层[]记住
     */
    addPolygon:function(source,coordinates){
        //coordinates = [[[125,23.2],[123.1,23.3],[123.3,23.4],[123.4,23.5],[125,23.2]]]
        var polygon  = new ol.geom.Polygon(coordinates,'XY');
        var feature = new ol.Feature({
            geometry: polygon
        });

        var stroke = new ol.style.Stroke({
            color: "rgba(255,51,255,1)",
            width: 3
        });
        var fill = new ol.style.Fill({
            color:'rgba(23,145,252,0.35)'
        })
        var style = new ol.style.Style({
            stroke:stroke,
            fill:fill
        })
        feature.setStyle(style);
        source.addFeature(feature);
        return feature;
    },
    /**添加矩形
     * @param {*vectorSource} source 
     * @param {*数组格式  [[[lng,lat],[lng,lat],[lng,lat],[lng,lat]]] } coordinates 3层[]记住
     */
    addRectangle:function(source,coordinates){
        //coordinates = [[[125,23.2],[123.1,23.3],[123.3,23.4],[123.4,23.5]]]
        var polygon  = new ol.geom.Polygon(coordinates,'XY');
        var feature = new ol.Feature({
            geometry: polygon
        });

        var stroke = new ol.style.Stroke({
            color: "rgba(255,51,255,1)",
            width: 3
        });
        var fill = new ol.style.Fill({
            color:'rgba(23,145,252,0.35)'
        })
        var style = new ol.style.Style({
            stroke:stroke,
            fill:fill
        })
        feature.setStyle(style);
        source.addFeature(feature);
        return feature;
    },
    /**
     * 获取点标记旋转角度
     * @param {*点标记} marker 
     * @return {*角度 360}
     */
    getMarkerRotation:function(marker){
        var rotation = marker.getStyle().getImage().getRotation()*180/Math.PI;
        return rotation;
    },
    /**
     * 获取点标记旋转角度
     * @param {*点标记} marker 
     * @param {*角度 360} rotation
     */
    setMarkerRotation:function(marker,rotation){
        var rotation = marker.getStyle().getImage().setRotation(rotation/180*Math.PI);
        return rotation;
    },
    setMarkerHide:function(marker){
        var stroke = new ol.style.Stroke({
            color: "transparent",
            width: 3
        })
        marker.getStyle().setStroke(stroke);
    },
    setMarkerShow:function(marker){
        marker.getStyle().setStroke(null);
    },
    setZoomAndCenter:function(map,zoom,center) {
		map.getView().animate({center:center,zoom:zoom});
    },
    getMarkerCoordinate:function(marker){
        return marker.getGeometry().getCoordinates();
    },
    setMarkerCoordinate:function(marker,lng,lat){
        marker.getGeometry().setCoordinates([lng,lat]);
    },
    /**
	 * 获取地图经纬度矩形范围
	 * @returns 地图经纬度矩形范围，LTMap.Bounds格式
	 */
	getBounds:function(map) {
		var bounds = map.getView().calculateExtent(map.getSize());
		var southWest = [bounds[0],bounds[1]];
		var northEast = [bounds[2],bounds[3]];		
        var mapBound = [southWest,northEast];
		return mapBound; 
	},
	/**
	 * 设置地图经纬度矩形范围
	 * @param bound 地图经纬度矩形范围，LTMap.Bounds格式，必填
	 */
	setBounds:function(bounds) {
		map.getView.fit(bounds); //地图视角切换到矩阵范围			
    },
    LimitedSize:function(map,size){
        var southwest = this.getBounds(map)[0];
        var northeast = this.getBounds(map)[1];
        
        var possa = southwest[0];
        var possn = southwest[1];
        var posna = northeast[0];
        var posnn = northeast[1];

        var psa = possa - ((posna - possa) * size);
        var psn = possn - ((posnn - possn) * size);
        var pna = posna + ((posna - possa) * size);
        var pnn = posnn + ((posnn - possn) * size);
        var paths = [
            [psn, psa], //西南角坐标
            [pnn, pna]//东北角坐标
        ]
        this.setBounds(paths);
    }
}
zyscom.vehiclePath = function(map,points,url,layer,param){
    this.vectorLayer = layer;
    this.now = null;
    var that = this;
    var lnglat = points[0];
    var source = layer.getSource();
    var speed = (param!=undefined && param.speed != undefined)? param.speed : 10;
    var scale = (param!=undefined && param.scale != undefined)? param.scale : 1;
    //车辆标记角度
    var angle = (param!=undefined && param.angle != undefined)? param.angle :null;
    //创建轨迹动画线标记及点标记
    var polyLine = zyscom.addLineString(source,points);
    
    var polyLineLength = points.length;
    var polyLineCoordinates = polyLine.getGeometry().getCoordinates(); //线标记端点坐标
    var marker = zyscom.addMarker(source,lnglat[0],lnglat[1],url,angle); //起点标记
    marker.getStyle().getImage().setScale(scale);
    that.marker = marker;

    var markerStyle = new ol.style.Style({
        image: new ol.style.Icon({
            src: url,
            rotateWithView: true,//图标是否可旋转
            rotation: 0,
            scale: scale
        })
    });
    var hideStyle = new ol.style.Style({
        stroke: new ol.style.Stroke({
            color: "transparent",
            width: 3
        })
    });

    //创建动画
    var animate = function(event) {
        // debugger;
        marker.setStyle(hideStyle); //隐藏起始点坐标 
        //获取渲染图层的画布
        var vectorContext = ol.render.getVectorContext(event);
        var frameState = event.frameState;   
        var elapsedTime = frameState.time - that.now; //消逝的时间
        var index = Math.round(speed * elapsedTime /1000);//坐标下标
        if(index >= polyLineLength){  
            that.stopAnimation();
            return;           
        }
        var feature = new ol.Feature({
            geometry:new ol.geom.Point(polyLineCoordinates[index])
        });
        //调整图标方向
        if(index >= 1 && index < polyLineLength-1){
            //获取两坐标角度
            var getAngle = function(lnglat,lnglat2) {
                var pi_90 = Math.atan2(1,0);
                var pi_xy = Math.atan2(lnglat2[1] - lnglat[1],lnglat2[0] - lnglat[0]);
                return pi_90 - pi_xy;
            };
            var lnglat = polyLineCoordinates[index];
            var lnglat2 = polyLineCoordinates[index+1];
            markerStyle.getImage().setRotation(getAngle(lnglat,lnglat2));
        }
        //刷新动画
        vectorContext.drawFeature(feature,markerStyle);//设置迁徙过程中图标样式
        // vectorContext.drawStyle(markerStyle);
        // vectorContext.drawGeometry(geometry);
        map.render();
    }
    /**
     * 开始动画
     */
    this.start = function() {
        var that = this;
        var startAnimate = function() {
            // map.render();
            that.now = new Date().getTime(); 
            // map.on("postcompose",animate);//绑定动画
            //监听图层渲染后的事件
            that.vectorLayer.on('postrender', animate);
        }
        setTimeout(startAnimate,100); 
    };
    this.stopAnimation = function(){
        that.vectorLayer.un('postrender', animate);
        this.animating = false;
        var coord = polyLineCoordinates[polyLineLength-1];
        var geometry = this.marker.getGeometry();
        geometry.setCoordinates(coord);
        marker.setStyle(markerStyle);
        // this.vectorLayer.getSource().addFeature(this.geoMarker)
        
    }
}